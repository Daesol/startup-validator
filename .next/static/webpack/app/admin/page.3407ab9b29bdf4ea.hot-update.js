"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/lib/supabase/validation-service.ts":
/*!************************************************!*\
  !*** ./src/lib/supabase/validation-service.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearValidationTables: () => (/* binding */ clearValidationTables),\n/* harmony export */   getValidationFormWithAnalysis: () => (/* binding */ getValidationFormWithAnalysis),\n/* harmony export */   getValidationForms: () => (/* binding */ getValidationForms),\n/* harmony export */   saveValidationForm: () => (/* binding */ saveValidationForm)\n/* harmony export */ });\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./server */ \"(app-pages-browser)/./src/lib/supabase/server.ts\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/ssr */ \"(app-pages-browser)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\n\n// Client-side functions\nasync function saveValidationForm(formData) {\n    let formType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"general\", analysis = arguments.length > 2 ? arguments[2] : void 0;\n    try {\n        const supabase = (0,_server__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        if (!supabase) {\n            return {\n                success: false,\n                error: \"Failed to create Supabase client\"\n            };\n        }\n        // Save the form data\n        const { data: form, error: formError } = await supabase.from(\"validation_forms\").insert({\n            form_type: formType,\n            business_idea: formData.businessIdea,\n            website: formData.websiteUrl || null,\n            business_stage: 'businessStage' in formData ? formData.businessStage : null,\n            business_type: 'businessType' in formData ? formData.businessType : null,\n            personal_problem: 'personalProblem' in formData ? formData.personalProblem : null,\n            target_audience: 'targetAudience' in formData ? formData.targetAudience : null,\n            target_audience_other: 'targetAudienceOther' in formData ? formData.targetAudienceOther : null,\n            charging: 'charging' in formData ? formData.charging : null,\n            differentiation: 'differentiation' in formData ? formData.differentiation : null,\n            competitors: 'competitors' in formData && formData.competitors && formData.competitors.length > 0 ? formData.competitors : null,\n            user_count: 'userCount' in formData && formData.userCount ? Number(formData.userCount) : null,\n            mau: 'mau' in formData && formData.mau ? Number(formData.mau) : null,\n            monthly_revenue: 'monthlyRevenue' in formData && formData.monthlyRevenue ? Number(formData.monthlyRevenue) : null,\n            acquisition_channel: 'acquisitionChannel' in formData ? formData.acquisitionChannel : null,\n            revenue_range: 'revenueRange' in formData ? formData.revenueRange : null,\n            pricing_model: 'pricingModel' in formData ? formData.pricingModel : null,\n            pricing_model_other: 'pricingModelOther' in formData ? formData.pricingModelOther : null,\n            cac: 'cac' in formData && formData.cac ? Number(formData.cac) : null,\n            ltv: 'ltv' in formData && formData.ltv ? Number(formData.ltv) : null,\n            team_size: 'teamSize' in formData && formData.teamSize ? Number(formData.teamSize) : null,\n            raised_funds: 'raisedFunds' in formData ? formData.raisedFunds : null,\n            funds_raised: 'fundsRaised' in formData && formData.fundsRaised ? Number(formData.fundsRaised) : null,\n            investors: 'investors' in formData ? formData.investors : null,\n            co_founder_count: 'coFounderCount' in formData && formData.coFounderCount ? Number(formData.coFounderCount) : null\n        }).select(\"id\").single();\n        if (formError) {\n            console.error(\"Error saving form:\", formError);\n            return {\n                success: false,\n                error: \"Failed to save form data\"\n            };\n        }\n        // Save team members if present\n        if ('teamMembers' in formData && formData.teamMembers && formData.teamMembers.length > 0) {\n            const teamMembersToInsert = formData.teamMembers.map((member)=>({\n                    validation_form_id: form.id,\n                    person: member.person,\n                    skills: member.skills\n                }));\n            const { error: teamError } = await supabase.from(\"team_members\").insert(teamMembersToInsert);\n            if (teamError) {\n                console.error(\"Error saving team members:\", teamError);\n            // Continue even if team members fail to save\n            }\n        }\n        // Save analysis if present\n        if (analysis) {\n            // Check if there's an existing analysis\n            const { data: existingAnalysis, error: checkError } = await supabase.from(\"validation_analyses\").select(\"id\").eq(\"validation_form_id\", form.id);\n            // If there's already an analysis, update it\n            if (!checkError && existingAnalysis && existingAnalysis.length > 0) {\n                const { error: updateError } = await supabase.from(\"validation_analyses\").update({\n                    market_analysis: analysis.market_analysis,\n                    business_model: analysis.business_model,\n                    team_strength: analysis.team_strength,\n                    overall_assessment: analysis.overall_assessment,\n                    updated_at: new Date().toISOString()\n                }).eq(\"validation_form_id\", form.id);\n                if (updateError) {\n                    console.error(\"Error updating analysis:\", updateError);\n                    return {\n                        success: true,\n                        formId: form.id,\n                        error: \"Analysis saved but validation failed\"\n                    };\n                }\n            } else {\n                // Otherwise, insert a new analysis\n                const { error: analysisError } = await supabase.from(\"validation_analyses\").insert({\n                    validation_form_id: form.id,\n                    market_analysis: analysis.market_analysis,\n                    business_model: analysis.business_model,\n                    team_strength: analysis.team_strength,\n                    overall_assessment: analysis.overall_assessment\n                });\n                if (analysisError) {\n                    console.error(\"Error saving analysis:\", analysisError);\n                    return {\n                        success: true,\n                        formId: form.id,\n                        error: \"Form saved but analysis failed\"\n                    };\n                }\n            }\n        }\n        return {\n            success: true,\n            formId: form.id\n        };\n    } catch (error) {\n        console.error(\"Error in saveValidationForm:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"An unexpected error occurred\"\n        };\n    }\n}\n// Server-side functions\nasync function getValidationForms() {\n    const supabaseServer = (0,_server__WEBPACK_IMPORTED_MODULE_0__.createServerSupabaseClient)();\n    const { data, error } = await supabaseServer.from(\"validation_forms\").select(\"*\").order(\"created_at\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching validation forms:\", error);\n        return [];\n    }\n    return data;\n}\nasync function getValidationFormWithAnalysis(id) {\n    const supabaseServer = (0,_server__WEBPACK_IMPORTED_MODULE_0__.createServerSupabaseClient)();\n    // Get the validation form with analysis\n    const { data, error } = await supabaseServer.from(\"validation_forms\").select(\"\\n      *,\\n      validation_analyses (*)\\n    \").eq(\"id\", id).single();\n    if (error) {\n        console.error(\"Error fetching validation form with analysis:\", error);\n        return null;\n    }\n    return {\n        ...data,\n        team_members: [] // Return empty array for team members until we have a proper table\n    };\n}\nasync function clearValidationTables() {\n    try {\n        const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_1__.createBrowserClient)(\"https://dynksioggkqwgivykuvh.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR5bmtzaW9nZ2txd2dpdnlrdXZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzMDUzMDEsImV4cCI6MjA1OTg4MTMwMX0.vMMZu55NMuzra_iq3JLraanzUlWrzwXRyMQ40TeJtJ0\");\n        // Clear team_members table first (due to foreign key constraint)\n        const { error: teamError } = await supabase.from(\"team_members\").delete().neq(\"id\", \"00000000-0000-0000-0000-000000000000\") // Delete all records\n        ;\n        if (teamError) {\n            console.error(\"Error clearing team_members:\", teamError);\n            return {\n                success: false,\n                error: \"Failed to clear team_members table\"\n            };\n        }\n        // Clear validation_analyses table next (due to foreign key constraint)\n        const { error: analysisError } = await supabase.from(\"validation_analyses\").delete().neq(\"id\", \"00000000-0000-0000-0000-000000000000\") // Delete all records\n        ;\n        if (analysisError) {\n            console.error(\"Error clearing validation_analyses:\", analysisError);\n            return {\n                success: false,\n                error: \"Failed to clear validation_analyses table\"\n            };\n        }\n        // Clear validation_forms table last\n        const { error: formError } = await supabase.from(\"validation_forms\").delete().neq(\"id\", \"00000000-0000-0000-0000-000000000000\") // Delete all records\n        ;\n        if (formError) {\n            console.error(\"Error clearing validation_forms:\", formError);\n            return {\n                success: false,\n                error: \"Failed to clear validation_forms table\"\n            };\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error in clearValidationTables:\", error);\n        return {\n            success: false,\n            error: \"An unexpected error occurred\"\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase/validation-service.ts\n"));

/***/ })

});